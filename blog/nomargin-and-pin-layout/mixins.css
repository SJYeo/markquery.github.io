.container-fixed-left() {
float:left;
display: block;
.clearfix();
}
.container-fixed-right() {
float:right;
display: block;
.clearfix();
}
 
// The Grid
#grid-nomargin {
// container nomargin

.core (@gridColumnWidth-nomargin, @gridGutterWidth-nomargin) {

.spanX (@index) when (@index > 0) {
.span@{index} { .span(@index); }
.spanX(@index - 1);
}
.spanX (0) {}

.offsetX (@index) when (@index > 0) {
.offset@{index} { .offset(@index); }
.offsetX(@index - 1);
}
.offsetX (0) {}

.offset (@columns) {
margin-left: ceil((@gridColumnWidth-nomargin * @columns) + (@gridGutterWidth-nomargin * (@columns + 1)));
}

.span (@columns) {
width: ceil((@gridColumnWidth-nomargin * @columns) + (@gridGutterWidth-nomargin * (@columns - 1)));
}

.row-nomargin {
margin-left: 0;
// margin-left: @gridGutterWidth * -1;
.clearfix();
}

.row-nomargin [class*="span"] {
float: left;
min-height: 1px; // prevent collapsing columns
margin-left: 0;
// margin-left: @gridGutterWidth;
}

// move media-query less. Set the container width, and override it for fixed navbars in media queries
.container-nomargin,
.navbar-static-top .container-nomargin,
.navbar-fixed-top .container-nomargin,
.navbar-fixed-bottom .container-nomargin { .span(@gridColumns); }

// generate .spanX and .offsetX
.spanX (@gridColumns);
.offsetX (@gridColumns);
}


// container-fluid nomargin

.fluid (@fluidGridColumnWidth-nomargin, @fluidGridGutterWidth-nomargin) {

.spanX (@index) when (@index > 0) {
.span@{index} { .span(@index); }
.spanX(@index - 1);
}
.spanX (0) {}

.offsetX (@index) when (@index > 0) {
.offset@{index} { .offset(@index); }
.offset@{index}:first-child { .offsetFirstChild(@index); }
.offsetX(@index - 1);
}
.offsetX (0) {}

.offset (@columns) {
margin-left: (@fluidGridColumnWidth-nomargin * @columns) + (@fluidGridGutterWidth-nomargin * (@columns - 1)) + (@fluidGridGutterWidth-nomargin*2);
*margin-left: (@fluidGridColumnWidth-nomargin * @columns) + (@fluidGridGutterWidth-nomargin * (@columns - 1)) - (.5 / @gridRowWidth-nomargin * 100 * 1%) + (@fluidGridGutterWidth-nomargin*2) - (.5 / @gridRowWidth-nomargin * 100 * 1%);
}

.offsetFirstChild (@columns) {
margin-left: (@fluidGridColumnWidth-nomargin * @columns) + (@fluidGridGutterWidth-nomargin * (@columns - 1)) + (@fluidGridGutterWidth-nomargin);
*margin-left: (@fluidGridColumnWidth-nomargin * @columns) + (@fluidGridGutterWidth-nomargin * (@columns - 1)) - (.5 / @gridRowWidth-nomargin * 100 * 1%) + @fluidGridGutterWidth-nomargin - (.5 / @gridRowWidth-nomargin * 100 * 1%);
}

.span (@columns) {
width: (@fluidGridColumnWidth-nomargin * @columns) + (@fluidGridGutterWidth-nomargin * (@columns - 1));
*width: (@fluidGridColumnWidth-nomargin * @columns) + (@fluidGridGutterWidth-nomargin * (@columns - 1)) - (.5 / @gridRowWidth-nomargin * 100 * 1%) + (@fluidGridGutterWidth-nomargin / 2 );
}

.row-fluid-nomargin {
width: 100%;
.clearfix();
[class*="span"] {
.input-block-level();
float: left;
margin-left:0;
*margin-left:0;
// margin-left: @fluidGridGutterWidth;
// *margin-left: @fluidGridGutterWidth - (.5 / @gridRowWidth * 100 * 1%);
}
[class*="span"]:first-child {
margin-left: 0;
}

// Space grid-sized controls properly if multiple per line
.controls-row [class*="span"] + [class*="span"] {
margin-left: @fluidGridGutterWidth-nomargin;
}

// generate .spanX and .offsetX
.spanX (@gridColumns);
.offsetX (@gridColumns);
}

}

.input(@gridColumnWidth-nomargin, @gridGutterWidth-nomargin) {

.spanX (@index) when (@index > 0) {
input.span@{index}, textarea.span@{index}, .uneditable-input.span@{index} { .span(@index); }
.spanX(@index - 1);
}
.spanX (0) {}

.span(@columns) {
width: ((@gridColumnWidth-nomargin) * @columns) + (@gridGutterWidth-nomargin * (@columns - 1)) - 14;
}

input,
textarea,
.uneditable-input {
margin-left: 0; // override margin-left from core grid system
}

// Space grid-sized controls properly if multiple per line
.controls-row [class*="span"] + [class*="span"] {
margin-left: @gridGutterWidth-nomargin;
}

// generate .spanX
.spanX (@gridColumns);

}
}